[{"title":"resume-vue笔记","date":"2017-09-17T11:27:06.000Z","path":"2017/09/17/resume-vue笔记/","text":"","tags":[]},{"title":"elemeVue笔记","date":"2017-09-17T07:26:18.000Z","path":"2017/09/17/elemeVue笔记/","text":"模拟后台数据1. 通过api/…即port+1/…地址访问db.json中的数据12345678910111213141516171819202122232425262728293031在build/dev-server.js中var apiServer = express()var bodyParser = require(&apos;body-parser&apos;)apiServer.use(bodyParser.urlencoded(&#123; extended: true &#125;))apiServer.use(bodyParser.json())var apiRouter = express.Router()var fs = require(&apos;fs&apos;)apiRouter.route(&apos;/:apiName&apos;) .all(function (req, res) &#123; fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function (err, data) &#123; if (err) throw err data = JSON.parse(data) if (data[req.params.apiName]) &#123; res.json(data[req.params.apiName]) &#125; else &#123; res.send(&apos;no such api name&apos;) &#125; &#125;) &#125;)apiServer.use(&apos;/api&apos;, apiRouter)apiServer.listen(port + 1, function (err) &#123; if (err) &#123; console.log(err) return &#125; console.log(&apos;Listening at http://localhost:&apos; + (port + 1) + &apos;\\n&apos;)&#125;)在config/index.js的dev中proxyTable: &#123; &apos;/api&apos;: &apos;http://localhost:3001&apos; &#125; 2. 用axios请求数据 用vuex时yarn add axios 12345678在store/actions.js中import Axios from &apos;axios&apos;fetchFalseHotWord (&#123;commit&#125;) &#123; Axios.get(&apos;api/falseHotWord&apos;) .then((res) =&gt; &#123; commit(&apos;SET_FALSE_HOT_WORD&apos;, res.data) &#125;) &#125; 不用vuex时yarn add axios, vue-axios 123456789101112131415在main.js中import Vue from &apos;vue&apos;import axios from &apos;axios&apos;import VueAxios from &apos;vue-axios&apos;Vue.use(VueAxios, axios)使用时Vue.axios.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;)this.axios.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;)this.$http.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;) css sticky footer清除浮动12345678910.clearfix:before, clearfix:after &#123; content: &quot;.&quot;; display: block; clear: both; visibility: hidden; line-height: 0; height: 0; font-size:0; &#125;.clearfix &#123; *zoom:1;&#125; // 移动端不需要 zoom: 1 为了兼容 IE6/7,在IE6, 7下zoom: 1会触发hasLayout，从而使元素闭合内部的浮动。 :before 给元素内部前面添加一个空的元素 display:block用来防止 Collapsing margins(外边距压扁) ，且保证当 IE6/7 应用 zoom:1 时的视觉一致性 :after 用来清除浮动 visibility: hidden 可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已 clear: both 清除左右两边浮动 display: block需要将元素转为块级元素才可以实现效果,inline-block也可以 content: “.” 内容为“.”就是一个英文的句号而已。也可以不写。 line-height: 0行高为0,设置这些主要是为了避免一些占用位置或者间隔的问题 height: 0高度为0,同上 font-size:0 字体大小为0,同上 清除浮动新方法：display: flow-root产生BFC12345678910111213141516.floatElement&#123; float: left; /*或者right*/ &#125; .wrapper::after &#123; /*兼容*/ content:&apos;&apos;; display: table; clear: both &#125; @supports(display:flow-root)&#123; .wrapper&#123; display: flow-root; &#125; .wrapper::after&#123; content:none; &#125; &#125; sticky footer：flex方法1234567设置footer和header的高度，main高度弹性可变，即flex&gt;0body &#123; display: flex; flex-flow: column; min-height: 100vh;&#125;main &#123; flex: 1; &#125; 像素border-1px的实现7 种方法解决移动端 Retina 屏幕 1px 边框问题用mixin写伪类实现1px的border-bottom再通过媒体查询根据DPR进行缩放123456789101112131415161718192021.border-1px(@color) &#123; position: relative; &amp;:after &#123; display: block; position: absolute; left: 0; bottom: 0; width: 100%; border-top: 1px solid @color; content: &apos; &apos;; @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) &#123; -webkit-transform: scaleY(0.7); transform: scaleY(0.7); &#125; @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); &#125; &#125;&#125;mixin写在mixin.less，@media写在base.less 将SVG转为字体调用用icomoon生成icon样式文件，调用SVG就加入对应的class。可减少小图片的http请求,也方便管理和使用这些小图片。将生成的fonts文件夹放入src/common，css文件改为icon.less放入src/common/less。引用时用，当做字体写样式，具体为i:before。 加入购物车抛物线小球动画用两层动画，外层为y轴抛物线函数，内层为x轴线性函数。用五个小球，则短时间内最多可显示五个小球动画。小球的起始状态用js写。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// html&lt;div class=&quot;ball-container&quot;&gt; &lt;div v-for=&quot;ball in balls&quot;&gt; &lt;transition name=&quot;drop&quot; @before-enter=&quot;beforeDrop&quot; @enter=&quot;dropping&quot; @after-enter=&quot;afterDrop&quot;&gt; &lt;div class=&quot;ball&quot; v-show=&quot;ball.show&quot;&gt; &lt;div class=&quot;inner inner-hook&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/transition&gt; &lt;/div&gt;&lt;/div&gt;// css.ball-container &#123; .ball &#123; position: fixed; left: .4rem; bottom: .3rem; z-index: 10; transition: all .4s cubic-bezier(0.49, -0.29, 0.75, 0.41); .inner &#123; width: 1rem; height: 1rem; border-radius: 50%; background: rgb(0, 160, 220); transition: all .4s linear; &#125; &#125;&#125;// javascriptdata () &#123; return &#123; balls: [ &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125; ], dropBalls: [] &#125;&#125;,methods: &#123; // 在列表组件引用触发动画 /*this.$nextTick(() =&gt; &#123; this.$refs.spCar.drop(e.target) &#125;)*/ drop (el) &#123; for (let i = 0; i &lt; this.balls.length; i++) &#123; let ball = this.balls[i] if (!ball.show) &#123; ball.show = true ball.el = el this.dropBalls.push(ball) return &#125; &#125; &#125;, // 小球定位到点击处 beforeDrop (el) &#123; for (let i = 0; i &lt; this.balls.length; i++) &#123; let ball = this.balls[i] if (ball.show) &#123; let rect = ball.el.getBoundingClientRect() let x = rect.left - window.innerWidth / 10 * 0.4 let y = -(window.innerHeight - rect.top - window.innerWidth / 10 * 0.3) el.style.display = &apos;&apos; el.style.webkitTransform = `translate3d(0, $&#123;y&#125;px, 0)` el.style.transform = `translate3d(0, $&#123;y&#125;px, 0)` let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0] inner.style.webkitTransform = `translate3d($&#123;x&#125;px, 0, 0)` inner.style.transform = `translate3d($&#123;x&#125;px, 0, 0)` &#125; &#125; &#125;, // 动画结束时的状态 dropping (el, done) &#123; // 触发重绘 /* eslint-disable no-unused-vars */ let rf = el.offsetHeight this.$nextTick(() =&gt; &#123; el.style.webkitTransform = `translate3d(0, 0, 0)` el.style.transform = `translate3d(0, 0, 0)` let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0] inner.style.webkitTransform = `translate3d(0, 0, 0)` inner.style.transform = `translate3d(0, 0, 0)` el.addEventListener(&apos;transitionend&apos;, () =&gt; &#123; this.$refs.carIcon.classList.add(&apos;duang&apos;) done() &#125;) &#125;) &#125;, afterDrop (el) &#123; let ball = this.dropBalls.shift() if (ball) &#123; ball.show = false // 设display为none需手动触发html重绘：dropping函数中的let rf = el.offsetHeight el.style.display = &apos;none&apos; &#125; &#125;&#125; 网页性能管理详解高性能JavaScript 重排与重绘用贝塞尔曲线模拟抛物线 oneBusiness组件样式grid写法3X3的格子，其中图片占第一列的三行。123456789// 父元素display: grid;grid-template-columns: 2rem 5rem 3rem;grid-template-rows: 3fr 1fr 3fr;// 子元素imggrid-column-start: 1;grid-column-end: 2;grid-row-start: 1;grid-row-end: 4; better-scroll 插件123456789101112131415161718import BScroll from &apos;better-scroll&apos;mounted () &#123; this.$nextTick(() =&gt; &#123; this.menuScroll = new BScroll(this.$refs.menuWrapper, &#123; click: true &#125;) this.foodsScroll = new BScroll(this.$refs.foodsWrapper, &#123; click: true, // 不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件 probeType: 3 &#125;) this.foodsScroll.on(&apos;scroll&apos;, (pos) =&gt; &#123; if (pos.y &lt;= 0) &#123; this.scrollY = Math.abs(Math.round(pos.y)) &#125; &#125;) &#125;)&#125; better-scroll文档当 better-scroll 遇见 Vue prod.server.jsnode prod.server.js // 启动服务器123456789101112131415161718192021222324252627282930313233343536373839404142var express = require(&apos;express&apos;); //导入expressvar config = require(&apos;./config/index&apos;); //导入index.js(里面有很多配置)var port = process.env.PORT || config.build.port; //初始化端口,端口在index.js配置var app = express(); //实例化expressvar router = express.Router(); //初始化路由router.get(&apos;/&apos;,function (req,res,next) &#123; req.url = &apos;/index.html&apos;; //这里访问的是发布dist/index.html next();&#125;);app.use(router);var appData = require(&apos;./data.json&apos;); //读取模拟的数据文件var seller = appData.seller;var goods = appData.goods;var ratings = appData.ratings;var apiRoutes = express.Router();apiRoutes.get(&apos;/seller&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: seller &#125;);&#125;);apiRoutes.get(&apos;/goods&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: goods &#125;);&#125;);apiRoutes.get(&apos;/ratings&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: ratings &#125;);&#125;);app.use(&apos;/api&apos;, apiRoutes);app.use(express.static(&apos;./dist&apos;)); //使用./dist作为web目录,所以能够找到.dist/index.htmlmodule.exports = app.listen(port, function (err) &#123; //启动监听 if (err) &#123; console.log(err); return &#125; console.log(&apos;Listening at http://localhost:&apos; + port + &apos;\\n&apos;)&#125;); github 预览config/index.js中 - assetsPublicPath: &apos;/&apos;, + assetsPublicPath: &apos;./&apos;, 然后 yarn run build 打包，打开dist/idnex.html，页面结构正常显示。生成gh-pages 分支，其中只包含dist中的static文件夹和index.html。设置Github Pages得网址。制作github在线预览效果","tags":[{"name":"vue","slug":"vue","permalink":"http://samanthalu.site/tags/vue/"}]},{"title":"Vue中:src引用赋值问题","date":"2017-08-25T13:22:04.413Z","path":"2017/08/25/Vue中src引用赋值问题/","text":"对img标签1234567data () &#123; return &#123; img: require(&apos;path/to/your/source&apos;) &#125;&#125;//然后在template中&lt;img :src=&quot;img&quot; /&gt; 对背景图12345678data () &#123; return &#123; img: require(&apos;path/to/your/source&apos;) &#125;&#125;&lt;div :style=&quot;&#123;backgroundImage: &apos;url(&apos; + img + &apos;)&apos;&#125;&quot;&gt;&lt;/div&gt;或者直接在css中定义background-image: url(&apos;path/to/your/source&apos;);","tags":[{"name":"vue","slug":"vue","permalink":"http://samanthalu.site/tags/vue/"}]}]