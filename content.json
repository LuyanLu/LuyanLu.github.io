[{"title":"cookie和session","date":"2017-09-25T05:39:12.000Z","path":"2017/09/25/cookie和session/","text":"cookie和session的区别 cookie数据存放在客户的浏览器上，session数据放在服务器上。 cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗。所以考虑到安全应当使用session。 session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。所以考虑到减轻服务器性能方面，应当使用COOKIE。 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。 一般建议将登陆信息等重要信息存放为SESSION，其他信息如果需要保留，可以放在COOKIE中。 cookiecookie的内容主要包括，名字，值，过期时间，域一起构成，如果不设置过期时间，则在这次浏览器关闭窗口的时候就过期了，这种cookie我们通常称之为会话cookie。会话cookie并没有保存在硬盘中，而是存储在内存里，感觉怪怪的哈，也就必须的这种行为并不是规范的行为。 如果设置了过期时间，这个cookie会保存在硬盘里，直到过期之前都是有效的。 处理步骤： 服务器向客户端发送 cookie。 通常使用 HTTP 协议规定的 set-cookie 头操作。 规范规定 cookie 的格式为 name = value 格式，且必须包含这部分。 浏览器将 cookie 保存。 每次请求浏览器都会将 cookie 发向服务器。 其他影响将cookie发送给服务器端的可选参数： path：表示 cookie 影响到的路径，匹配该路径才发送这个 cookie。 expires 和 maxAge：告诉浏览器这个 cookie 什么时候过期，expires 是 UTC 格式时间，maxAge 是 cookie 多久后过期的相对时间。当不设置这两个选项时，会产生 session cookie，session cookie 是 transient 的，当用户关闭浏览器时，就被清除。一般用来保存 session 的 session_id。 secure：当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。 httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie。一般情况下都应该设置这个为 true，这样可以避免被 xss 攻击拿到 cookie。express 中的 cookieexpress4 中操作 cookie 使用 cookie-parser 模块。1234567891011121314151617181920212223var express = require(&apos;express&apos;);// 首先引入 cookie-parser 这个模块var cookieParser = require(&apos;cookie-parser&apos;);var app = express();app.listen(3000);// 使用 cookieParser 中间件，cookieParser(secret, options)// 其中 secret 用来加密 cookie 字符串（下面会提到 signedCookies）// options 传入上面介绍的 cookie 可选参数app.use(cookieParser());app.get(&apos;/&apos;, function (req, res) &#123; // 如果请求中的 cookie 存在 isVisit, 则输出 cookie // 否则，设置 cookie 字段 isVisit, 并设置过期时间为1分钟 if (req.cookies.isVisit) &#123; console.log(req.cookies); res.send(&quot;再次欢迎访问&quot;); &#125; else &#123; res.secret=&apos;这段签名的字符串可以是随意的&apos;; res.cookie(&apos;name&apos;,&apos;Nealyang&apos;,&#123; path:&apos;/&apos;,//访问哪一个路径的时候我们给你加上cookie maxAge:20*60*1000,//cookie的存活时间,单位毫秒 signed:true//是否加签名 &#125;); console.log(&apos;没有签名的cookie：&apos;,req.cookies); console.log(&apos;签名后的cookie：&apos;,req.signedCookies); res.send(req.cookies); &#125;&#125;); cookie删除：res.clearCookie(&#39;isVisit&#39;) sessionsession是通过cookie生成的一个存储在服务端的一个标识。在浏览器请求的时候会首先检查浏览器是否带有一个session_id加密的cookie，如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来，并且使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。 express 中操作 session 要用到 express-session 这个模块，主要的方法就是session(options)，其中 options 中包含可选参数，主要有： name: 设置 cookie 中，保存 session 的字段名称，默认为 connect.sid 。 store: session 的存储方式，默认存放在内存中，也可以使用 redis，mongodb 等。express 生态中都有相应模块的支持。 secret: 通过设置的 secret 字符串，来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改。 cookie: 设置存放 session id 的 cookie 的相关选项，默认为(default: { path: ‘/‘, httpOnly: true, secure: false, maxAge: null }) genid: 产生一个新的 session_id 时，所使用的函数， 默认使用 uid2 这个 npm 包。 rolling: 每个请求都重新设置一个 cookie，默认为 false。 resave: 即使 session 没有被修改，也保存 session 值，默认为 true。 session 的 store 有四个常用选项：1）内存 2）cookie 3）缓存 4）数据库开发环境存内存就好了,但内存 session 除了省事之外，没有别的好处。缓存方式是最常用的方式，即快，又能共享状态。 express 中的 sessionexpress-session 默认使用内存来存 session，对于开发调试来说很方便。123456789101112131415161718var express = require(&apos;express&apos;);// 首先引入 express-session 这个模块var session = require(&apos;express-session&apos;);var app = express();app.listen(5000);// 按照上面的解释，设置 session 的可选参数app.use(session(&#123; secret: &apos;recommand 128 bytes random string&apos;, // 建议使用 128 个字符的随机字符串 cookie: &#123; maxAge: 60 * 1000 &#125;&#125;));app.get(&apos;/&apos;, function (req, res) &#123; // 检查 session 中的 isVisit 字段 // 如果存在则增加一次，否则为 session 设置 isVisit 字段，并初始化为 1。 if(req.session.isVisit) &#123; req.session.isVisit++; res.send(&apos;&lt;p&gt;第 &apos; + req.session.isVisit + &apos;次来此页面&lt;/p&gt;&apos;); &#125; else &#123; req.session.isVisit = 1; res.send(&quot;欢迎第一次来这里&quot;); console.log(req.session); &#125;&#125;); session 存放在内存中不方便进程间共享，可以使用 redis 等缓存来存储 session。使用 connect-redis 模块来得到 redis 连接实例，然后在 session 中设置存储方式为该实例。 因为 session_id 在 cookie 中的存储方式是 session cookie。即，当用户一关闭浏览器，浏览器 cookie 中的 session_id 字段就会消失。所以我们要在 cookie 中，也保存一份关于用户身份的信息。比如有这样一个用户 {username: &#39;alsotang&#39;, age: 22, company: &#39;alibaba&#39;, location: &#39;hangzhou&#39;}我们可以考虑把这四个字段的信息都存在 session 中，而在 cookie，我们用 signedCookies 来存个 username。 登陆的检验过程伪代码如下：12345678910if (req.session.user) &#123; // 获取 user 并进行下一步 next()&#125; else if (req.signedCookies[&apos;username&apos;]) &#123; // 如果存在则从数据库中获取这个 username 的信息，并保存到 session 中 getuser(function (err, user) &#123; req.session.user = user; next(); &#125;);&#125; else &#123; // 当做为登陆用户处理 next();&#125;","tags":[{"name":"node.js","slug":"node-js","permalink":"http://samanthalu.site/tags/node-js/"}]},{"title":"resume-vue笔记","date":"2017-09-17T11:27:06.000Z","path":"2017/09/17/resume-vue笔记/","text":"Vue transition-group 用v-for循环将五个基础组件都加入DOM，而非用is决定动态组件，减少不必要的渲染。 transition名字由滑动方向决定：name = slide-up/slide-down。 加入animate.css，用enter-active-class等，赋值应为字符串，不能为表达式。限制翻页用leave钩子在上页离开动画结束时阻止翻页。12345678// transition-group中@leave=&quot;slidingHandler&quot;slidingHandler (el, done) &#123; oneTime(el, &apos;animationend&apos;, () =&gt; &#123; // sliding为true时才能进入滚动函数 this.sliding = false done() &#125;)&#125; 入场动画用after-enter钩子emit每个组件的enterAnimate函数，函数中设showMe为true，触发animate.css入场动画。12345// transition-group中@after-enter=&quot;enterHandler&quot;enterHandler () &#123; // 每页的showMe为true执行动画 this.$refs.component[this.curIndex].enterAnimate()&#125;, 一次事件监听函数1234567const oneTime = function (node, type, callback) &#123; node.addEventListener(type, handler) function handler (e) &#123; e.target.removeEventListener(e.type, handler) return callback(e) &#125;&#125; 滚轮事件mousewheel事件中，event.wheelDelta0 为向下滚动。 节流函数监听滚轮事件的handle函数，执行需经过节流。123456789101112131415161718192021/*delay为fn执行时间间隔，mustRunDelay为必须执行的时间间隔，即该时间内必须至少执行一次。*/const _throttleV2 = function (fn, delay, mustRunDelay) &#123; let timer = null let tStart return (...params) =&gt; &#123; let tCurr = +new Date() clearTimeout(timer) if (!tStart) &#123; tStart = tCurr &#125; if (tCurr - tStart &gt;= mustRunDelay) &#123; fn.apply(this, params) tStart = tCurr &#125; else &#123; timer = setTimeout(function () &#123; fn.apply(this, params) &#125;, delay) &#125; &#125;&#125; 图片加载、打包问题加载在data中，img: require(path/to/your/source),可使图片数据与代码分离。 用js给伪元素添加样式document.styleSheets[0].insertRule(&#39;&lt;label&gt;:after {...}&#39;, 0) 出现dist/static/css/static/...打包时出现图片无法显示的问题，发现图片路径中出现dist/static/css/static/...，这说明路径指向了更深层。若图片都出现这样的问题，则在build/webpack.base.conf.js中：123456789&#123; test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: &apos;url-loader&apos;, options: &#123; limit: 10000, name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)+ pubicPath: &apos;../../&apos; &#125;&#125; 若只有个别图片出现问题（如该项目中给伪元素加样式出现图片路径问题），直接在路径前加../../：12345678// template&lt;div :style=&quot;&#123;backgroundImage: &apos;url(../../&apos; + img + &apos;)&apos;&#125;&quot;&gt;&lt;/div&gt;// scriptsdata () &#123; return &#123; img: require(&apos;path/to/your/source&apos;) &#125;&#125;","tags":[{"name":"vue","slug":"vue","permalink":"http://samanthalu.site/tags/vue/"}]},{"title":"elemeVue笔记","date":"2017-09-17T07:26:18.000Z","path":"2017/09/17/elemeVue笔记/","text":"模拟后台数据1. 通过api/…即port+1/…地址访问db.json中的数据12345678910111213141516171819202122232425262728293031在build/dev-server.js中var apiServer = express()var bodyParser = require(&apos;body-parser&apos;)apiServer.use(bodyParser.urlencoded(&#123; extended: true &#125;))apiServer.use(bodyParser.json())var apiRouter = express.Router()var fs = require(&apos;fs&apos;)apiRouter.route(&apos;/:apiName&apos;) .all(function (req, res) &#123; fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function (err, data) &#123; if (err) throw err data = JSON.parse(data) if (data[req.params.apiName]) &#123; res.json(data[req.params.apiName]) &#125; else &#123; res.send(&apos;no such api name&apos;) &#125; &#125;) &#125;)apiServer.use(&apos;/api&apos;, apiRouter)apiServer.listen(port + 1, function (err) &#123; if (err) &#123; console.log(err) return &#125; console.log(&apos;Listening at http://localhost:&apos; + (port + 1) + &apos;\\n&apos;)&#125;)在config/index.js的dev中proxyTable: &#123; &apos;/api&apos;: &apos;http://localhost:3001&apos; &#125; 2. 用axios请求数据 用vuex时yarn add axios 12345678在store/actions.js中import Axios from &apos;axios&apos;fetchFalseHotWord (&#123;commit&#125;) &#123; Axios.get(&apos;api/falseHotWord&apos;) .then((res) =&gt; &#123; commit(&apos;SET_FALSE_HOT_WORD&apos;, res.data) &#125;) &#125; 不用vuex时yarn add axios, vue-axios 123456789101112131415在main.js中import Vue from &apos;vue&apos;import axios from &apos;axios&apos;import VueAxios from &apos;vue-axios&apos;Vue.use(VueAxios, axios)使用时Vue.axios.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;)this.axios.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;)this.$http.get(api).then((response) =&gt; &#123; console.log(response.data)&#125;) css sticky footer清除浮动12345678910.clearfix:before, clearfix:after &#123; content: &quot;.&quot;; display: block; clear: both; visibility: hidden; line-height: 0; height: 0; font-size:0; &#125;.clearfix &#123; *zoom:1;&#125; // 移动端不需要 zoom: 1 为了兼容 IE6/7,在IE6, 7下zoom: 1会触发hasLayout，从而使元素闭合内部的浮动。 :before 给元素内部前面添加一个空的元素 display:block用来防止 Collapsing margins(外边距压扁) ，且保证当 IE6/7 应用 zoom:1 时的视觉一致性 :after 用来清除浮动 visibility: hidden 可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已 clear: both 清除左右两边浮动 display: block需要将元素转为块级元素才可以实现效果,inline-block也可以 content: “.” 内容为“.”就是一个英文的句号而已。也可以不写。 line-height: 0行高为0,设置这些主要是为了避免一些占用位置或者间隔的问题 height: 0高度为0,同上 font-size:0 字体大小为0,同上 清除浮动新方法：display: flow-root产生BFC12345678910111213141516.floatElement&#123; float: left; /*或者right*/ &#125; .wrapper::after &#123; /*兼容*/ content:&apos;&apos;; display: table; clear: both &#125; @supports(display:flow-root)&#123; .wrapper&#123; display: flow-root; &#125; .wrapper::after&#123; content:none; &#125; &#125; sticky footer：flex方法1234567设置footer和header的高度，main高度弹性可变，即flex&gt;0body &#123; display: flex; flex-flow: column; min-height: 100vh;&#125;main &#123; flex: 1; &#125; 像素border-1px的实现7 种方法解决移动端 Retina 屏幕 1px 边框问题用mixin写伪类实现1px的border-bottom再通过媒体查询根据DPR进行缩放123456789101112131415161718192021.border-1px(@color) &#123; position: relative; &amp;:after &#123; display: block; position: absolute; left: 0; bottom: 0; width: 100%; border-top: 1px solid @color; content: &apos; &apos;; @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) &#123; -webkit-transform: scaleY(0.7); transform: scaleY(0.7); &#125; @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); &#125; &#125;&#125;mixin写在mixin.less，@media写在base.less 将SVG转为字体调用用icomoon生成icon样式文件，调用SVG就加入对应的class。可减少小图片的http请求,也方便管理和使用这些小图片。将生成的fonts文件夹放入src/common，css文件改为icon.less放入src/common/less。引用时用，当做字体写样式，具体为i:before。 加入购物车抛物线小球动画用两层动画，外层为y轴抛物线函数，内层为x轴线性函数。用五个小球，则短时间内最多可显示五个小球动画。小球的起始状态用js写。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// html&lt;div class=&quot;ball-container&quot;&gt; &lt;div v-for=&quot;ball in balls&quot;&gt; &lt;transition name=&quot;drop&quot; @before-enter=&quot;beforeDrop&quot; @enter=&quot;dropping&quot; @after-enter=&quot;afterDrop&quot;&gt; &lt;div class=&quot;ball&quot; v-show=&quot;ball.show&quot;&gt; &lt;div class=&quot;inner inner-hook&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/transition&gt; &lt;/div&gt;&lt;/div&gt;// css.ball-container &#123; .ball &#123; position: fixed; left: .4rem; bottom: .3rem; z-index: 10; transition: all .4s cubic-bezier(0.49, -0.29, 0.75, 0.41); .inner &#123; width: 1rem; height: 1rem; border-radius: 50%; background: rgb(0, 160, 220); transition: all .4s linear; &#125; &#125;&#125;// javascriptdata () &#123; return &#123; balls: [ &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125;, &#123;show: false&#125; ], dropBalls: [] &#125;&#125;,methods: &#123; // 在列表组件引用触发动画 /*this.$nextTick(() =&gt; &#123; this.$refs.spCar.drop(e.target) &#125;)*/ drop (el) &#123; for (let i = 0; i &lt; this.balls.length; i++) &#123; let ball = this.balls[i] if (!ball.show) &#123; ball.show = true ball.el = el this.dropBalls.push(ball) return &#125; &#125; &#125;, // 小球定位到点击处 beforeDrop (el) &#123; for (let i = 0; i &lt; this.balls.length; i++) &#123; let ball = this.balls[i] if (ball.show) &#123; let rect = ball.el.getBoundingClientRect() let x = rect.left - window.innerWidth / 10 * 0.4 let y = -(window.innerHeight - rect.top - window.innerWidth / 10 * 0.3) el.style.display = &apos;&apos; el.style.webkitTransform = `translate3d(0, $&#123;y&#125;px, 0)` el.style.transform = `translate3d(0, $&#123;y&#125;px, 0)` let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0] inner.style.webkitTransform = `translate3d($&#123;x&#125;px, 0, 0)` inner.style.transform = `translate3d($&#123;x&#125;px, 0, 0)` &#125; &#125; &#125;, // 动画结束时的状态 dropping (el, done) &#123; // 触发重绘 /* eslint-disable no-unused-vars */ let rf = el.offsetHeight this.$nextTick(() =&gt; &#123; el.style.webkitTransform = `translate3d(0, 0, 0)` el.style.transform = `translate3d(0, 0, 0)` let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0] inner.style.webkitTransform = `translate3d(0, 0, 0)` inner.style.transform = `translate3d(0, 0, 0)` el.addEventListener(&apos;transitionend&apos;, () =&gt; &#123; this.$refs.carIcon.classList.add(&apos;duang&apos;) done() &#125;) &#125;) &#125;, afterDrop (el) &#123; let ball = this.dropBalls.shift() if (ball) &#123; ball.show = false // 设display为none需手动触发html重绘：dropping函数中的let rf = el.offsetHeight el.style.display = &apos;none&apos; &#125; &#125;&#125; 网页性能管理详解高性能JavaScript 重排与重绘用贝塞尔曲线模拟抛物线 oneBusiness组件样式grid写法3X3的格子，其中图片占第一列的三行。123456789// 父元素display: grid;grid-template-columns: 2rem 5rem 3rem;grid-template-rows: 3fr 1fr 3fr;// 子元素imggrid-column-start: 1;grid-column-end: 2;grid-row-start: 1;grid-row-end: 4; better-scroll 插件123456789101112131415161718import BScroll from &apos;better-scroll&apos;mounted () &#123; this.$nextTick(() =&gt; &#123; this.menuScroll = new BScroll(this.$refs.menuWrapper, &#123; click: true &#125;) this.foodsScroll = new BScroll(this.$refs.foodsWrapper, &#123; click: true, // 不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件 probeType: 3 &#125;) this.foodsScroll.on(&apos;scroll&apos;, (pos) =&gt; &#123; if (pos.y &lt;= 0) &#123; this.scrollY = Math.abs(Math.round(pos.y)) &#125; &#125;) &#125;)&#125; better-scroll文档当 better-scroll 遇见 Vue prod.server.jsnode prod.server.js // 启动服务器123456789101112131415161718192021222324252627282930313233343536373839404142var express = require(&apos;express&apos;); //导入expressvar config = require(&apos;./config/index&apos;); //导入index.js(里面有很多配置)var port = process.env.PORT || config.build.port; //初始化端口,端口在index.js配置var app = express(); //实例化expressvar router = express.Router(); //初始化路由router.get(&apos;/&apos;,function (req,res,next) &#123; req.url = &apos;/index.html&apos;; //这里访问的是发布dist/index.html next();&#125;);app.use(router);var appData = require(&apos;./data.json&apos;); //读取模拟的数据文件var seller = appData.seller;var goods = appData.goods;var ratings = appData.ratings;var apiRoutes = express.Router();apiRoutes.get(&apos;/seller&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: seller &#125;);&#125;);apiRoutes.get(&apos;/goods&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: goods &#125;);&#125;);apiRoutes.get(&apos;/ratings&apos;, function (req, res) &#123; res.json(&#123; errno: 0, data: ratings &#125;);&#125;);app.use(&apos;/api&apos;, apiRoutes);app.use(express.static(&apos;./dist&apos;)); //使用./dist作为web目录,所以能够找到.dist/index.htmlmodule.exports = app.listen(port, function (err) &#123; //启动监听 if (err) &#123; console.log(err); return &#125; console.log(&apos;Listening at http://localhost:&apos; + port + &apos;\\n&apos;)&#125;); github 预览 config/index.js中- assetsPublicPath: &apos;/&apos;, + assetsPublicPath: &apos;./&apos;, 然后 yarn run build 打包，打开dist/idnex.html，页面结构正常显示。 打包不生成SourceMap文件：config/index.js中productionSourceMap: false。 生成gh-pages 分支，其中只包含dist中的static文件夹和index.html。设置Github Pages得网址。制作github在线预览效果","tags":[{"name":"vue","slug":"vue","permalink":"http://samanthalu.site/tags/vue/"}]},{"title":"Vue中:src引用赋值问题","date":"2017-08-25T13:22:04.413Z","path":"2017/08/25/Vue中src引用赋值问题/","text":"对img标签1234567data () &#123; return &#123; img: require(&apos;path/to/your/source&apos;) &#125;&#125;//然后在template中&lt;img :src=&quot;img&quot; /&gt; 对背景图12345678data () &#123; return &#123; img: require(&apos;path/to/your/source&apos;) &#125;&#125;&lt;div :style=&quot;&#123;backgroundImage: &apos;url(&apos; + img + &apos;)&apos;&#125;&quot;&gt;&lt;/div&gt;或者直接在css中定义background-image: url(&apos;path/to/your/source&apos;);","tags":[{"name":"vue","slug":"vue","permalink":"http://samanthalu.site/tags/vue/"}]}]