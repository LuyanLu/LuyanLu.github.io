<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Samantha&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/89e0364fa60a9a53c541472f211dc964</icon>
  <subtitle>云在青天水在瓶</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://samanthalu.site/"/>
  <updated>2017-09-18T09:31:33.300Z</updated>
  <id>http://samanthalu.site/</id>
  
  <author>
    <name>Samantha Lu</name>
    <email>samanthalu@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>resume-vue笔记</title>
    <link href="http://samanthalu.site/2017/09/17/resume-vue%E7%AC%94%E8%AE%B0/"/>
    <id>http://samanthalu.site/2017/09/17/resume-vue笔记/</id>
    <published>2017-09-17T11:27:06.000Z</published>
    <updated>2017-09-18T09:31:33.300Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><h2 id="Vue-transition-group"><a href="#Vue-transition-group" class="headerlink" title="Vue transition-group"></a>Vue transition-group</h2><ul><li>用v-for循环将五个基础组件都加入DOM，而非用is决定动态组件，减少不必要的渲染。</li><li>transition名字由滑动方向决定：name = slide-up/slide-down。</li><li>加入animate.css，用enter-active-class等，赋值应为字符串，不能为表达式。<h3 id="限制翻页"><a href="#限制翻页" class="headerlink" title="限制翻页"></a>限制翻页</h3>用leave钩子在上页离开动画结束时阻止翻页。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// transition-group中@leave=&quot;slidingHandler&quot;</div><div class="line">slidingHandler (el, done) &#123;</div><div class="line">  oneTime(el, &apos;animationend&apos;, () =&gt; &#123;</div><div class="line">    // sliding为true时才能进入滚动函数</div><div class="line">    this.sliding = false</div><div class="line">    done()</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="入场动画"><a href="#入场动画" class="headerlink" title="入场动画"></a>入场动画</h3><p>用after-enter钩子emit每个组件的enterAnimate函数，函数中设showMe为true，触发animate.css入场动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// transition-group中@after-enter=&quot;enterHandler&quot;</div><div class="line">enterHandler () &#123;   </div><div class="line">  // 每页的showMe为true执行动画</div><div class="line">  this.$refs.component[this.curIndex].enterAnimate()</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><h3 id="一次事件监听函数"><a href="#一次事件监听函数" class="headerlink" title="一次事件监听函数"></a>一次事件监听函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const oneTime = function (node, type, callback) &#123;</div><div class="line">  node.addEventListener(type, handler)</div><div class="line">  function handler (e) &#123;</div><div class="line">    e.target.removeEventListener(e.type, handler)</div><div class="line">    return callback(e)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h2><p>mousewheel事件中，event.wheelDelta<0 为向下滚动；="" firefox的dommousescroll事件中，event.detail="">0 为向下滚动。</0></p><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>监听滚轮事件的handle函数，执行需经过节流。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/*delay为fn执行时间间隔，mustRunDelay为必须执行的时间间隔，即该时间内必须至少执行一次。</div><div class="line">*/</div><div class="line">const _throttleV2 = function (fn, delay, mustRunDelay) &#123;</div><div class="line">  let timer = null</div><div class="line">  let tStart</div><div class="line">  return (...params) =&gt; &#123;</div><div class="line">    let tCurr = +new Date()</div><div class="line">    clearTimeout(timer)</div><div class="line">    if (!tStart) &#123;</div><div class="line">      tStart = tCurr</div><div class="line">    &#125;</div><div class="line">    if (tCurr - tStart &gt;= mustRunDelay) &#123;</div><div class="line">      fn.apply(this, params)</div><div class="line">      tStart = tCurr</div><div class="line">    &#125; else &#123;</div><div class="line">      timer = setTimeout(function () &#123;</div><div class="line">        fn.apply(this, params)</div><div class="line">      &#125;, delay)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="图片加载、打包问题"><a href="#图片加载、打包问题" class="headerlink" title="图片加载、打包问题"></a>图片加载、打包问题</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>在data中，<code>img: require(path/to/your/source)</code>,可使图片数据与代码分离。</p><h3 id="用js给伪元素添加样式"><a href="#用js给伪元素添加样式" class="headerlink" title="用js给伪元素添加样式"></a>用js给伪元素添加样式</h3><p><code>document.styleSheets[0].insertRule(&#39;&lt;label&gt;:after {...}&#39;, 0)</code></p><h3 id="出现dist-static-css-static"><a href="#出现dist-static-css-static" class="headerlink" title="出现dist/static/css/static/..."></a>出现<code>dist/static/css/static/...</code></h3><p>打包时出现图片无法显示的问题，发现图片路径中出现<code>dist/static/css/static/...</code>，这说明路径指向了更深层。<br>若图片都出现这样的问题，则在build/webpack.base.conf.js中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</div><div class="line">  loader: &apos;url-loader&apos;,</div><div class="line">  options: &#123;</div><div class="line">    limit: 10000,</div><div class="line">    name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</div><div class="line">+   pubicPath: &apos;../../&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>若只有个别图片出现问题（如该项目中给伪元素加样式出现图片路径问题），直接在路径前加<code>../../</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// template</div><div class="line">&lt;div :style=&quot;&#123;backgroundImage: &apos;url(../../&apos; + img + &apos;)&apos;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">// scripts</div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    img: require(&apos;path/to/your/source&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/as
      
    
    </summary>
    
      <category term="项目笔记" scheme="http://samanthalu.site/categories/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="http://samanthalu.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>elemeVue笔记</title>
    <link href="http://samanthalu.site/2017/09/17/elemeVue%E7%AC%94%E8%AE%B0/"/>
    <id>http://samanthalu.site/2017/09/17/elemeVue笔记/</id>
    <published>2017-09-17T07:26:18.000Z</published>
    <updated>2017-09-18T09:21:58.754Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><h2 id="模拟后台数据"><a href="#模拟后台数据" class="headerlink" title="模拟后台数据"></a>模拟后台数据</h2><h3 id="1-通过api-…即port-1-…地址访问db-json中的数据"><a href="#1-通过api-…即port-1-…地址访问db-json中的数据" class="headerlink" title="1. 通过api/…即port+1/…地址访问db.json中的数据"></a>1. 通过api/…即port+1/…地址访问db.json中的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">在build/dev-server.js中</div><div class="line">var apiServer = express()</div><div class="line">var bodyParser = require(&apos;body-parser&apos;)</div><div class="line">apiServer.use(bodyParser.urlencoded(&#123; extended: true &#125;))</div><div class="line">apiServer.use(bodyParser.json())</div><div class="line">var apiRouter = express.Router()</div><div class="line">var fs = require(&apos;fs&apos;)</div><div class="line">apiRouter.route(&apos;/:apiName&apos;)</div><div class="line">  .all(function (req, res) &#123;</div><div class="line">    fs.readFile(&apos;./db.json&apos;, &apos;utf8&apos;, function (err, data) &#123;</div><div class="line">      if (err) throw err</div><div class="line">      data = JSON.parse(data)</div><div class="line">      if (data[req.params.apiName]) &#123;</div><div class="line">        res.json(data[req.params.apiName])</div><div class="line">      &#125; else &#123;</div><div class="line">        res.send(&apos;no such api name&apos;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">apiServer.use(&apos;/api&apos;, apiRouter)</div><div class="line">apiServer.listen(port + 1, function (err) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">    console.log(err)</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  console.log(&apos;Listening at http://localhost:&apos; + (port + 1) + &apos;\n&apos;)</div><div class="line">&#125;)</div><div class="line">在config/index.js的dev中</div><div class="line">proxyTable: &#123;</div><div class="line">      &apos;/api&apos;: &apos;http://localhost:3001&apos;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="2-用axios请求数据"><a href="#2-用axios请求数据" class="headerlink" title="2. 用axios请求数据"></a>2. 用axios请求数据</h3><ul><li><p>用vuex时<br><code>yarn add axios</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">在store/actions.js中</div><div class="line">import Axios from &apos;axios&apos;</div><div class="line">fetchFalseHotWord (&#123;commit&#125;) &#123;</div><div class="line">    Axios.get(&apos;api/falseHotWord&apos;)</div><div class="line">      .then((res) =&gt; &#123;</div><div class="line">        commit(&apos;SET_FALSE_HOT_WORD&apos;, res.data)</div><div class="line">      &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></li><li><p>不用vuex时<br><code>yarn add axios, vue-axios</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">在main.js中</div><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import axios from &apos;axios&apos;</div><div class="line">import VueAxios from &apos;vue-axios&apos;</div><div class="line">Vue.use(VueAxios, axios)</div><div class="line">使用时</div><div class="line">Vue.axios.get(api).then((response) =&gt; &#123;</div><div class="line">  console.log(response.data)</div><div class="line">&#125;)</div><div class="line">this.axios.get(api).then((response) =&gt; &#123;</div><div class="line">  console.log(response.data)</div><div class="line">&#125;)</div><div class="line">this.$http.get(api).then((response) =&gt; &#123;</div><div class="line">  console.log(response.data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><h2 id="css-sticky-footer清除浮动"><a href="#css-sticky-footer清除浮动" class="headerlink" title="css sticky footer清除浮动"></a>css sticky footer清除浮动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.clearfix:before, clearfix:after &#123;</div><div class="line">    content: &quot;.&quot;;   </div><div class="line">    display: block;   </div><div class="line">    clear: both;     </div><div class="line">    visibility: hidden;</div><div class="line">    line-height: 0;   </div><div class="line">    height: 0;   </div><div class="line">    font-size:0;    </div><div class="line">&#125;</div><div class="line">.clearfix &#123; *zoom:1;&#125; // 移动端不需要</div></pre></td></tr></table></figure><ul><li>zoom: 1 为了兼容 IE6/7,在IE6, 7下zoom: 1会触发hasLayout，从而使元素闭合内部的浮动。</li><li>:before 给元素内部前面添加一个空的元素 display:block用来防止 <strong>Collapsing margins(外边距压扁)</strong> ，且保证当 IE6/7 应用 zoom:1 时的视觉一致性</li><li>:after 用来清除浮动<ul><li>visibility: hidden 可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已</li><li>clear: both 清除左右两边浮动</li><li>display: block需要将元素转为块级元素才可以实现效果,inline-block也可以</li><li>content: “.” 内容为“.”就是一个英文的句号而已。也可以不写。</li><li>line-height: 0行高为0,设置这些主要是为了避免一些占用位置或者间隔的问题</li><li>height: 0高度为0,同上</li><li>font-size:0 字体大小为0,同上</li></ul></li></ul><hr><p>清除浮动新方法：display: flow-root产生BFC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.floatElement&#123; </div><div class="line">    float: left; /*或者right*/ </div><div class="line">&#125; </div><div class="line">.wrapper::after &#123; /*兼容*/</div><div class="line">    content:&apos;&apos;; </div><div class="line">    display: table; </div><div class="line">    clear: both </div><div class="line">&#125; </div><div class="line">@supports(display:flow-root)&#123; </div><div class="line">    .wrapper&#123; </div><div class="line">        display: flow-root; </div><div class="line">    &#125; </div><div class="line">    .wrapper::after&#123; </div><div class="line">        content:none; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p>sticky footer：flex方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">设置footer和header的高度，main高度弹性可变，即flex&gt;0</div><div class="line">body &#123;</div><div class="line">    display: flex;</div><div class="line">    flex-flow: column;</div><div class="line">    min-height: 100vh;</div><div class="line">&#125;</div><div class="line">main &#123; flex: 1; &#125;</div></pre></td></tr></table></figure></p><h2 id="像素border-1px的实现"><a href="#像素border-1px的实现" class="headerlink" title="像素border-1px的实现"></a>像素border-1px的实现</h2><p><a href="https://juejin.im/entry/584e427361ff4b006cd22c7c" target="_blank" rel="external">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a><br>用mixin写伪类实现1px的border-bottom<br>再通过媒体查询根据DPR进行缩放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.border-1px(@color) &#123;</div><div class="line">  position: relative;</div><div class="line">  &amp;:after &#123;</div><div class="line">    display: block;</div><div class="line">    position: absolute;</div><div class="line">    left: 0;</div><div class="line">    bottom: 0;</div><div class="line">    width: 100%;</div><div class="line">    border-top: 1px solid @color;</div><div class="line">    content: &apos; &apos;;</div><div class="line">    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) &#123;</div><div class="line">      -webkit-transform: scaleY(0.7);</div><div class="line">      transform: scaleY(0.7);</div><div class="line">    &#125;</div><div class="line">    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;</div><div class="line">      -webkit-transform: scaleY(0.5);</div><div class="line">      transform: scaleY(0.5);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">mixin写在mixin.less，@media写在base.less</div></pre></td></tr></table></figure></p><h2 id="将SVG转为字体调用"><a href="#将SVG转为字体调用" class="headerlink" title="将SVG转为字体调用"></a>将SVG转为字体调用</h2><p>用icomoon生成icon样式文件，调用SVG就加入对应的class。可减少小图片的http请求,也方便管理和使用这些小图片。<br>将生成的fonts文件夹放入src/common，css文件改为icon.less放入src/common/less。<br>引用时用<i class="icon-XXX"></i>，当做字体写样式，具体为i:before。</p><h2 id="加入购物车抛物线小球动画"><a href="#加入购物车抛物线小球动画" class="headerlink" title="加入购物车抛物线小球动画"></a>加入购物车抛物线小球动画</h2><p>用两层动画，外层为y轴抛物线函数，内层为x轴线性函数。<br>用五个小球，则短时间内最多可显示五个小球动画。<br>小球的起始状态用js写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line">&lt;div class=&quot;ball-container&quot;&gt;</div><div class="line">  &lt;div v-for=&quot;ball in balls&quot;&gt;</div><div class="line">    &lt;transition name=&quot;drop&quot; @before-enter=&quot;beforeDrop&quot; @enter=&quot;dropping&quot; @after-enter=&quot;afterDrop&quot;&gt;</div><div class="line">      &lt;div class=&quot;ball&quot; v-show=&quot;ball.show&quot;&gt;</div><div class="line">        &lt;div class=&quot;inner inner-hook&quot;&gt;&lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/transition&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">// css</div><div class="line">.ball-container &#123;</div><div class="line">  .ball &#123;</div><div class="line">    position: fixed;</div><div class="line">    left: .4rem;</div><div class="line">    bottom: .3rem;</div><div class="line">    z-index: 10;</div><div class="line">    transition: all .4s cubic-bezier(0.49, -0.29, 0.75, 0.41);</div><div class="line">    .inner &#123;</div><div class="line">      width: 1rem;</div><div class="line">      height: 1rem;</div><div class="line">      border-radius: 50%;</div><div class="line">      background: rgb(0, 160, 220);</div><div class="line">      transition: all .4s linear;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// javascript</div><div class="line">data () &#123;</div><div class="line">  return &#123;</div><div class="line">    balls: [</div><div class="line">      &#123;show: false&#125;,</div><div class="line">      &#123;show: false&#125;,</div><div class="line">      &#123;show: false&#125;,</div><div class="line">      &#123;show: false&#125;,</div><div class="line">      &#123;show: false&#125;</div><div class="line">    ],</div><div class="line">    dropBalls: []</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  // 在列表组件引用触发动画</div><div class="line">  /*this.$nextTick(() =&gt; &#123;</div><div class="line">      this.$refs.spCar.drop(e.target)</div><div class="line">    &#125;)*/</div><div class="line">  drop (el) &#123;</div><div class="line">    for (let i = 0; i &lt; this.balls.length; i++) &#123;</div><div class="line">      let ball = this.balls[i]</div><div class="line">      if (!ball.show) &#123;</div><div class="line">        ball.show = true</div><div class="line">        ball.el = el</div><div class="line">        this.dropBalls.push(ball)</div><div class="line">        return</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  // 小球定位到点击处</div><div class="line">  beforeDrop (el) &#123;</div><div class="line">    for (let i = 0; i &lt; this.balls.length; i++) &#123;</div><div class="line">      let ball = this.balls[i]</div><div class="line">      if (ball.show) &#123;</div><div class="line">        let rect = ball.el.getBoundingClientRect()</div><div class="line">        let x = rect.left - window.innerWidth / 10 * 0.4</div><div class="line">        let y = -(window.innerHeight - rect.top - window.innerWidth / 10 * 0.3)</div><div class="line">        el.style.display = &apos;&apos;</div><div class="line">        el.style.webkitTransform = `translate3d(0, $&#123;y&#125;px, 0)`</div><div class="line">        el.style.transform = `translate3d(0, $&#123;y&#125;px, 0)`</div><div class="line">        let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0]</div><div class="line">        inner.style.webkitTransform = `translate3d($&#123;x&#125;px, 0, 0)`</div><div class="line">        inner.style.transform = `translate3d($&#123;x&#125;px, 0, 0)`</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  // 动画结束时的状态</div><div class="line">  dropping (el, done) &#123;</div><div class="line">    // 触发重绘</div><div class="line">    /* eslint-disable no-unused-vars */</div><div class="line">    let rf = el.offsetHeight</div><div class="line">    this.$nextTick(() =&gt; &#123;</div><div class="line">      el.style.webkitTransform = `translate3d(0, 0, 0)`</div><div class="line">      el.style.transform = `translate3d(0, 0, 0)`</div><div class="line">      let inner = el.getElementsByClassName(&apos;inner-hook&apos;)[0]</div><div class="line">      inner.style.webkitTransform = `translate3d(0, 0, 0)`</div><div class="line">      inner.style.transform = `translate3d(0, 0, 0)`</div><div class="line">      el.addEventListener(&apos;transitionend&apos;, () =&gt; &#123;</div><div class="line">        this.$refs.carIcon.classList.add(&apos;duang&apos;)</div><div class="line">        done()</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  afterDrop (el) &#123;</div><div class="line">    let ball = this.dropBalls.shift()</div><div class="line">    if (ball) &#123;</div><div class="line">      ball.show = false</div><div class="line">      //  设display为none需手动触发html重绘：dropping函数中的let rf = el.offsetHeight</div><div class="line">      el.style.display = &apos;none&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="external">网页性能管理详解</a><br><a href="http://www.cnblogs.com/zichi/p/4720000.html" target="_blank" rel="external">高性能JavaScript 重排与重绘</a><br>用<a href="http://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="external">贝塞尔曲线</a>模拟抛物线</p><h2 id="oneBusiness组件样式grid写法"><a href="#oneBusiness组件样式grid写法" class="headerlink" title="oneBusiness组件样式grid写法"></a>oneBusiness组件样式grid写法</h2><p>3X3的格子，其中图片占第一列的三行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 父元素</div><div class="line">display: grid;</div><div class="line">grid-template-columns: 2rem 5rem 3rem;</div><div class="line">grid-template-rows: 3fr 1fr 3fr;</div><div class="line">// 子元素img</div><div class="line">grid-column-start: 1;</div><div class="line">grid-column-end: 2;</div><div class="line">grid-row-start: 1;</div><div class="line">grid-row-end: 4;</div></pre></td></tr></table></figure></p><h2 id="better-scroll-插件"><a href="#better-scroll-插件" class="headerlink" title="better-scroll 插件"></a>better-scroll 插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import BScroll from &apos;better-scroll&apos;</div><div class="line">mounted () &#123;</div><div class="line">  this.$nextTick(() =&gt; &#123;</div><div class="line">this.menuScroll = new BScroll(this.$refs.menuWrapper, &#123;</div><div class="line">  click: true</div><div class="line">&#125;)</div><div class="line">this.foodsScroll = new BScroll(this.$refs.foodsWrapper, &#123;</div><div class="line">  click: true,</div><div class="line">      // 不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件</div><div class="line">  probeType: 3</div><div class="line">&#125;)</div><div class="line">this.foodsScroll.on(&apos;scroll&apos;, (pos) =&gt; &#123;</div><div class="line">  if (pos.y &lt;= 0) &#123;</div><div class="line">    this.scrollY = Math.abs(Math.round(pos.y))</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://ustbhuangyi.github.io/better-scroll/doc" target="_blank" rel="external">better-scroll文档</a><br><a href="https://zhuanlan.zhihu.com/p/27407024" target="_blank" rel="external">当 better-scroll 遇见 Vue</a></p><h2 id="prod-server-js"><a href="#prod-server-js" class="headerlink" title="prod.server.js"></a>prod.server.js</h2><p>node prod.server.js // 启动服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">var express = require(&apos;express&apos;); //导入express</div><div class="line">var config = require(&apos;./config/index&apos;); //导入index.js(里面有很多配置)</div><div class="line">var port = process.env.PORT || config.build.port; //初始化端口,端口在index.js配置</div><div class="line">var app = express(); //实例化express</div><div class="line">var router = express.Router(); //初始化路由</div><div class="line">router.get(&apos;/&apos;,function (req,res,next) &#123;</div><div class="line">  req.url = &apos;/index.html&apos;; //这里访问的是发布dist/index.html</div><div class="line">  next();</div><div class="line">&#125;);</div><div class="line">app.use(router);</div><div class="line">var appData = require(&apos;./data.json&apos;); //读取模拟的数据文件</div><div class="line">var seller = appData.seller;</div><div class="line">var goods = appData.goods;</div><div class="line">var ratings = appData.ratings;</div><div class="line">var apiRoutes = express.Router();</div><div class="line">apiRoutes.get(&apos;/seller&apos;, function (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: seller</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">apiRoutes.get(&apos;/goods&apos;, function (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: goods</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">apiRoutes.get(&apos;/ratings&apos;, function (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: ratings</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line">app.use(&apos;/api&apos;, apiRoutes);</div><div class="line">app.use(express.static(&apos;./dist&apos;)); //使用./dist作为web目录,所以能够找到.dist/index.html</div><div class="line">module.exports = app.listen(port, function (err) &#123; //启动监听</div><div class="line">  if (err) &#123;</div><div class="line">    console.log(err);</div><div class="line">    return</div><div class="line">  &#125;</div><div class="line">  console.log(&apos;Listening at http://localhost:&apos; + port + &apos;\n&apos;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="github-预览"><a href="#github-预览" class="headerlink" title="github 预览"></a>github 预览</h2><ul><li>config/index.js中<pre><code>- assetsPublicPath: &apos;/&apos;,+ assetsPublicPath: &apos;./&apos;,</code></pre>然后 <code>yarn run build</code> 打包，打开dist/idnex.html，页面结构正常显示。</li><li>打包不生成SourceMap文件：config/index.js中<code>productionSourceMap: false</code>。</li><li>生成gh-pages 分支，其中只包含dist中的static文件夹和index.html。设置Github Pages得网址。<br><a href="http://www.upyang.com/2017/07/25/Vue%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E5%B9%B6%E9%A2%84%E8%A7%88/#制作github在线预览效果" target="_blank" rel="external">制作github在线预览效果</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/as
      
    
    </summary>
    
      <category term="项目笔记" scheme="http://samanthalu.site/categories/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="http://samanthalu.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中:src引用赋值问题</title>
    <link href="http://samanthalu.site/2017/08/25/Vue%E4%B8%ADsrc%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>http://samanthalu.site/2017/08/25/Vue中src引用赋值问题/</id>
    <published>2017-08-25T13:22:04.413Z</published>
    <updated>2017-08-25T14:15:39.501Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><h2 id="对img标签"><a href="#对img标签" class="headerlink" title="对img标签"></a>对img标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">    return &#123;</div><div class="line">        img: require(&apos;path/to/your/source&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//然后在template中</div><div class="line">&lt;img :src=&quot;img&quot; /&gt;</div></pre></td></tr></table></figure><h2 id="对背景图"><a href="#对背景图" class="headerlink" title="对背景图"></a>对背景图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">    return &#123;</div><div class="line">        img: require(&apos;path/to/your/source&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;div :style=&quot;&#123;backgroundImage: &apos;url(&apos; + img + &apos;)&apos;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line">或者直接在css中定义</div><div class="line">background-image: url(&apos;path/to/your/source&apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/as
      
    
    </summary>
    
      <category term="coding tips" scheme="http://samanthalu.site/categories/coding-tips/"/>
    
    
      <category term="vue" scheme="http://samanthalu.site/tags/vue/"/>
    
  </entry>
  
</feed>
