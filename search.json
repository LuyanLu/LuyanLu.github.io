[{"title":"JS算法 - 排序","url":"/2017/09/27/JS算法-排序/","content":"## 冒泡排序\n```\n// 冒泡排序 每次将最小元素推至最前\nfunction sort4(array) {\n  var len = array.length,\n  i, j, tmp, result;\n  result = array.slice(0);\n  for (i = 0; i < len; i++) {\n    for (j = len - 1; j > i; j--) {\n      if (result[j] < result[j - 1]) {\n        tmp = result[j - 1];\n        result[j - 1] = result[j];\n        result[j] = tmp;\n      }\n    }\n  }\n  return result;\n}\n```\n改进冒泡排序\n```\n// 如果在某次的排序中没有出现交换的情况，\n// 那么说明在无序的元素现在已经是有序了，就可以直接返回了。\nfunction sort5(array) {\n  var len = array.length,\n  i, j, tmp, exchange, result;\n\n  result = array.slice(0);\n  for (i = 0; i < len; i++) {\n    exchange = 0;\n    for (j = len - 1; j > i; j--) {\n      if (result[j] < result[j - 1]) {\n        tmp = result[j];\n        result[j] = result[j - 1];\n        result[j - 1] = tmp;\n        exchange = 1;\n      }\n    }\n    if (!exchange) return result;\n  }\n  return result;\n}\n```\n## 选择排序\n```\n// 在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。\n// 原理跟冒泡排序一样，算是冒泡的衍生版本\nfunction sort7(array) {\n  var len = array.length,\n  i, j, k, tmp, result;\n\n  result = array.slice(0);\n  for (i = 0; i < len; i++) {\n    k = i;\n    for (j = i + 1; j < len; j++) {\n      if (result[j] < result[k]) k = j;\n    }\n    if (k != i) {\n      tmp = result[k];\n      result[k] = result[i];\n      result[i] = tmp;\n    }\n  }\n  return result;\n}\n```\n## 快速排序\n在JS中相对较快\n```\n//（1）在数据集之中，选择一个元素作为\"基准\"（pivot）。\n//（2）所有小于\"基准\"的元素，都移到\"基准\"的左边；所有大于\"基准\"的元素，都移到\"基准\"的右边。\n//（3）对\"基准\"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\nfunction sort6(array) {\n  var tmp_array = array.slice(0), result,\n  quickSort = function(arr) {\n  if (arr.length <= 1) { return arr; }\n  var pivotIndex = Math.floor(arr.length / 2);\n  var pivot = arr.splice(pivotIndex, 1)[0];\n  var left = [];\n  var right = [];\n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] < pivot) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right));\n  };\n  result = quickSort(tmp_array);\n  return result;\n}\n```\n## 插入排序\n```\n// 插入排序 从下标1开始每增1项排序一次，越往后遍历次数越多\nfunction sort1(array) {\n  var len = array.length,\n      i, j, tmp, result;\n  \n  // 设置数组副本\n  result = array.slice(0);\n  for(i=1; i < len; i++){\n    tmp = result[i];\n    j = i - 1;\n    while(j>=0 && tmp < result[j]){\n      result[j+1] = result[j];\n      j--;\n    }\n    result[j+1] = tmp;\n  }\n  return result;\n}\n```\n改进：二分插入排序\n```\n// 先在有序区通过二分查找的方法找到移动元素的起始位置，\n// 然后通过这个起始位置将后面所有的元素后移\nfunction sort2(array) {\n  var len = array.length,\n      i, j, tmp, low, high, mid, result;\n  // 赋予数组副本\n  result = array.slice(0);\n  for(i = 1; i < len; i++){\n    tmp = result[i];\n    low = 0;\n    high = i - 1;\n    while(low <= high){\n      mid = parseInt((low + high)/2, 10);\n      if(tmp < result[mid]) high = mid - 1;\n      else low = mid + 1;\n    }\n    for(j = i - 1; j >= high+1; j--){\n      result[j+1] = result[j];            \n    }\n    result[j+1] = tmp;\n  }\n  return result;\n}\n```\n## 希尔排序\n```\n// 希尔排序：先取合适gap将整个待排序记录序列分割成若干个子序列\n// 在序列内分别进行直接插入排序，待整个序列基本有序时，\n// 再对全体记录进行一次直接插入排序\nfunction sort3(array){\n  var len = array.length, gap = parseInt(len/2), \n      i, j, tmp, result;\n  // 复制数组\n  result = array.slice(0);\n  while(gap > 0){\n    for(i = gap; i < len; i++){\n      tmp = result[i];\n      j = i - gap;\n      while(j>=0 && tmp < result[j]){\n        result[j + gap] = result[j];\n        j = j - gap;\n      }\n      result[j + gap] = tmp;\n    }\n    gap = parseInt(gap/2);\n  }\n  return result;\n}\n```\n动态定义间隔序列\n```\nwhile(gap < len/5) { //动态定义间隔序列 \n    gap =gap*5+1; \n}\n```\nmark: [十大经典排序算法总结（JavaScript描述）](https://juejin.im/post/57dcd394a22b9d00610c5ec8)","tags":["排序"],"categories":["干货"]},{"title":"cookie和session","url":"/2017/09/25/cookie和session/","content":"## cookie和session的区别\n+ cookie数据存放在客户的浏览器上，session数据放在服务器上。\n+ cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗。所以考虑到安全应当使用session。\n+ session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。所以考虑到减轻服务器性能方面，应当使用COOKIE。\n+ 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n+ 一般建议将登陆信息等重要信息存放为SESSION，其他信息如果需要保留，可以放在COOKIE中。\n\n## cookie\ncookie的内容主要包括，名字，值，过期时间，域一起构成，如果不设置过期时间，则在这次浏览器关闭窗口的时候就过期了，这种cookie我们通常称之为会话cookie。会话cookie并没有保存在硬盘中，而是存储在内存里，感觉怪怪的哈，也就必须的这种行为并不是规范的行为。    如果设置了过期时间，这个cookie会保存在硬盘里，直到过期之前都是有效的。\n\n处理步骤：\n+ 服务器向客户端发送 cookie。\n  - 通常使用 HTTP 协议规定的 set-cookie 头操作。\n  - 规范规定 cookie 的格式为 name = value 格式，且必须包含这部分。\n+ 浏览器将 cookie 保存。\n+ 每次请求浏览器都会将 cookie 发向服务器。\n\n其他影响将cookie发送给服务器端的可选参数：\n+ path：表示 cookie 影响到的路径，匹配该路径才发送这个 cookie。\n+ expires 和 maxAge：告诉浏览器这个 cookie 什么时候过期，expires 是 UTC 格式时间，maxAge 是 cookie 多久后过期的相对时间。当不设置这两个选项时，会产生 session cookie，session cookie 是 transient 的，当用户关闭浏览器时，就被清除。一般用来保存 session 的 session_id。\n+ secure：当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。\n+ httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie。一般情况下都应该设置这个为 true，这样可以避免被 xss 攻击拿到 cookie。\n### express 中的 cookie\nexpress4 中操作 cookie 使用 [cookie-parser](https://github.com/expressjs/cookie-parser) 模块。\n```\nvar express = require('express');// 首先引入 cookie-parser 这个模块\nvar cookieParser = require('cookie-parser');\nvar app = express();\napp.listen(3000);// 使用 cookieParser 中间件，cookieParser(secret, options)// 其中 secret 用来加密 cookie 字符串（下面会提到 signedCookies）// options 传入上面介绍的 cookie 可选参数\napp.use(cookieParser());\n\napp.get('/', function (req, res) {  // 如果请求中的 cookie 存在 isVisit, 则输出 cookie\n  // 否则，设置 cookie 字段 isVisit, 并设置过期时间为1分钟\n  if (req.cookies.isVisit) {    \n    console.log(req.cookies);\n    res.send(\"再次欢迎访问\");\n  } else {\n    res.secret='这段签名的字符串可以是随意的';\n    res.cookie('name','Nealyang',{\n        path:'/',//访问哪一个路径的时候我们给你加上cookie\n        maxAge:20*60*1000,//cookie的存活时间,单位毫秒\n        signed:true//是否加签名\n    });\n    console.log('没有签名的cookie：',req.cookies);\n    console.log('签名后的cookie：',req.signedCookies);\n    res.send(req.cookies);\n  }\n});\n```\ncookie删除：`res.clearCookie('isVisit')`\n## session\nsession是通过cookie生成的一个存储在服务端的一个标识。在浏览器请求的时候会首先检查浏览器是否带有一个session_id加密的cookie，如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来，并且使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。\n\nexpress 中操作 session 要用到 [express-session](https://github.com/expressjs/session ) 这个模块，主要的方法就是session(options)，其中 options 中包含可选参数，主要有：\n+ name: 设置 cookie 中，保存 session 的字段名称，默认为 connect.sid 。\n+ store: session 的存储方式，默认存放在内存中，也可以使用 redis，mongodb 等。express 生态中都有相应模块的支持。\n+ secret: 通过设置的 secret 字符串，来计算 hash 值并放在 cookie 中，使产生的 signedCookie 防篡改。\n+ cookie: 设置存放 session id 的 cookie 的相关选项，默认为\n(default: { path: '/', httpOnly: true, secure: false, maxAge: null })\n+ genid: 产生一个新的 session_id 时，所使用的函数， 默认使用 uid2 这个 npm 包。\n+ rolling: 每个请求都重新设置一个 cookie，默认为 false。\n+ resave: 即使 session 没有被修改，也保存 session 值，默认为 true。\n\nsession 的 store 有四个常用选项：1）内存 2）cookie 3）缓存 4）数据库\n开发环境存内存就好了,但内存 session 除了省事之外，没有别的好处。\n缓存方式是最常用的方式，即快，又能共享状态。\n### express 中的 session\nexpress-session 默认使用内存来存 session，对于开发调试来说很方便。\n```\nvar express = require('express');// 首先引入 express-session 这个模块\nvar session = require('express-session');\nvar app = express();\napp.listen(5000);// 按照上面的解释，设置 session 的可选参数app.use(session({\n  secret: 'recommand 128 bytes random string', // 建议使用 128 个字符的随机字符串\n  cookie: { maxAge: 60 * 1000 }\n}));\n\napp.get('/', function (req, res) {  // 检查 session 中的 isVisit 字段\n  // 如果存在则增加一次，否则为 session 设置 isVisit 字段，并初始化为 1。\n  if(req.session.isVisit) {\n    req.session.isVisit++;\n    res.send('<p>第 ' + req.session.isVisit + '次来此页面</p>');\n  } else {\n    req.session.isVisit = 1;\n    res.send(\"欢迎第一次来这里\");    console.log(req.session);\n  }\n});\n```\nsession 存放在内存中不方便进程间共享，可以使用 redis 等缓存来存储 session。使用 [connect-redis 模块](https://github.com/tj/connect-redis )来得到 redis 连接实例，然后在 session 中设置存储方式为该实例。\n\n因为 session_id 在 cookie 中的存储方式是 session cookie。即，当用户一关闭浏览器，浏览器 cookie 中的 session_id 字段就会消失。所以我们要在 cookie 中，也保存一份关于用户身份的信息。\n比如有这样一个用户\n\n`{username: 'alsotang', age: 22, company: 'alibaba', location: 'hangzhou'}`\n我们可以考虑把这四个字段的信息都存在 session 中，而在 cookie，我们用 signedCookies 来存个 username。\n\n登陆的检验过程伪代码如下：\n```\nif (req.session.user) {  // 获取 user 并进行下一步\n  next()\n} else if (req.signedCookies['username']) {  // 如果存在则从数据库中获取这个 username 的信息，并保存到 session 中\n  getuser(function (err, user) {\n    req.session.user = user;\n    next();\n  });\n} else {  // 当做为登陆用户处理\n  next();\n}\n```","tags":["node.js"],"categories":["干货"]},{"title":"resume-vue笔记","url":"/2017/09/17/resume-vue笔记/","content":"## Vue transition-group\n+ 用v-for循环将五个基础组件都加入DOM，而非用is决定动态组件，减少不必要的渲染。\n+ transition名字由滑动方向决定：name = slide-up/slide-down。\n+ 加入animate.css，用enter-active-class等，赋值应为字符串，不能为表达式。\n### 限制翻页\n用leave钩子在上页离开动画结束时阻止翻页。\n```\n// transition-group中@leave=\"slidingHandler\"\nslidingHandler (el, done) {\n  oneTime(el, 'animationend', () => {\n    // sliding为true时才能进入滚动函数\n    this.sliding = false\n    done()\n  })\n}\n```\n### 入场动画\n用after-enter钩子emit每个组件的enterAnimate函数，函数中设showMe为true，触发animate.css入场动画。\n```\n// transition-group中@after-enter=\"enterHandler\"\nenterHandler () {   \n  // 每页的showMe为true执行动画\n  this.$refs.component[this.curIndex].enterAnimate()\n},\n```\n### 一次事件监听函数\n```\nconst oneTime = function (node, type, callback) {\n  node.addEventListener(type, handler)\n  function handler (e) {\n    e.target.removeEventListener(e.type, handler)\n    return callback(e)\n  }\n}\n```\n## 滚轮事件\nmousewheel事件中，event.wheelDelta<0 为向下滚动；\nFirefox的DOMMouseScroll事件中，event.detail>0 为向下滚动。\n### 节流函数\n监听滚轮事件的handle函数，执行需经过节流。\n```\n/*delay为fn执行时间间隔，mustRunDelay为必须执行的时间间隔，即该时间内必须至少执行一次。\n*/\nconst _throttleV2 = function (fn, delay, mustRunDelay) {\n  let timer = null\n  let tStart\n  return (...params) => {\n    let tCurr = +new Date()\n    clearTimeout(timer)\n    if (!tStart) {\n      tStart = tCurr\n    }\n    if (tCurr - tStart >= mustRunDelay) {\n      fn.apply(this, params)\n      tStart = tCurr\n    } else {\n      timer = setTimeout(function () {\n        fn.apply(this, params)\n      }, delay)\n    }\n  }\n}\n```\n## 图片加载、打包问题\n### 加载\n在data中，`img: require(path/to/your/source)`,可使图片数据与代码分离。\n### 用js给伪元素添加样式\n`document.styleSheets[0].insertRule('<label>:after {...}', 0)`\n### 出现`dist/static/css/static/...`\n打包时出现图片无法显示的问题，发现图片路径中出现`dist/static/css/static/...`，这说明路径指向了更深层。\n若图片都出现这样的问题，则在build/webpack.base.conf.js中：\n```\n{\n  test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n  loader: 'url-loader',\n  options: {\n    limit: 10000,\n    name: utils.assetsPath('img/[name].[hash:7].[ext]')\n+   pubicPath: '../../'\n  }\n}\n```\n若只有个别图片出现问题（如该项目中给伪元素加样式出现图片路径问题），直接在路径前加`../../`：\n```\n// template\n<div :style=\"{backgroundImage: 'url(../../' + img + ')'}\"></div>\n// scripts\ndata () {\n  return {\n    img: require('path/to/your/source')\n  }\n}\n```\n","tags":["vue"],"categories":["项目笔记"]},{"title":"elemeVue笔记","url":"/2017/09/17/elemeVue笔记/","content":"## 模拟后台数据\n### 1. 通过api/...即port+1/...地址访问db.json中的数据\n```\n在build/dev-server.js中\nvar apiServer = express()\nvar bodyParser = require('body-parser')\napiServer.use(bodyParser.urlencoded({ extended: true }))\napiServer.use(bodyParser.json())\nvar apiRouter = express.Router()\nvar fs = require('fs')\napiRouter.route('/:apiName')\n  .all(function (req, res) {\n    fs.readFile('./db.json', 'utf8', function (err, data) {\n      if (err) throw err\n      data = JSON.parse(data)\n      if (data[req.params.apiName]) {\n        res.json(data[req.params.apiName])\n      } else {\n        res.send('no such api name')\n      }\n    })\n  })\napiServer.use('/api', apiRouter)\napiServer.listen(port + 1, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  console.log('Listening at http://localhost:' + (port + 1) + '\\n')\n})\n在config/index.js的dev中\nproxyTable: {\n      '/api': 'http://localhost:3001'\n    }\n```\n### 2. 用axios请求数据\n- 用vuex时\n`yarn add axios`\n```\n在store/actions.js中\nimport Axios from 'axios'\nfetchFalseHotWord ({commit}) {\n    Axios.get('api/falseHotWord')\n      .then((res) => {\n        commit('SET_FALSE_HOT_WORD', res.data)\n      })\n  }\n```\n- 不用vuex时\n`yarn add axios, vue-axios`\n```\n在main.js中\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nVue.use(VueAxios, axios)\n使用时\nVue.axios.get(api).then((response) => {\n  console.log(response.data)\n})\nthis.axios.get(api).then((response) => {\n  console.log(response.data)\n})\nthis.$http.get(api).then((response) => {\n  console.log(response.data)\n})\n```\n## css sticky footer清除浮动\n\n```\n.clearfix:before, clearfix:after {\n    content: \".\";   \n    display: block;   \n    clear: both;     \n    visibility: hidden;\n    line-height: 0;   \n    height: 0;   \n    font-size:0;    \n}\n.clearfix { *zoom:1;} // 移动端不需要\n```\n- zoom: 1 为了兼容 IE6/7,在IE6, 7下zoom: 1会触发hasLayout，从而使元素闭合内部的浮动。\n- :before 给元素内部前面添加一个空的元素 display:block用来防止 **Collapsing margins(外边距压扁)** ，且保证当 IE6/7 应用 zoom:1 时的视觉一致性\n- :after 用来清除浮动\n\t* visibility: hidden 可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已\n\t* clear: both 清除左右两边浮动\n\t* display: block需要将元素转为块级元素才可以实现效果,inline-block也可以\n\t* content: \".\" 内容为“.”就是一个英文的句号而已。也可以不写。\n\t* line-height: 0行高为0,设置这些主要是为了避免一些占用位置或者间隔的问题\n\t* height: 0高度为0,同上\n\t* font-size:0 字体大小为0,同上\n---\n清除浮动新方法：display: flow-root产生BFC\n```\n.floatElement{ \n    float: left; /*或者right*/ \n} \n.wrapper::after { /*兼容*/\n    content:''; \n    display: table; \n    clear: both \n} \n@supports(display:flow-root){ \n    .wrapper{ \n        display: flow-root; \n    } \n    .wrapper::after{ \n        content:none; \n    } \n}\n```\n---\nsticky footer：flex方法\n```\n设置footer和header的高度，main高度弹性可变，即flex>0\nbody {\n    display: flex;\n    flex-flow: column;\n    min-height: 100vh;\n}\nmain { flex: 1; }\n```\n## 像素border-1px的实现\n[7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n用mixin写伪类实现1px的border-bottom\n再通过媒体查询根据DPR进行缩放\n```\n.border-1px(@color) {\n  position: relative;\n  &:after {\n    display: block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    border-top: 1px solid @color;\n    content: ' ';\n    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) {\n      -webkit-transform: scaleY(0.7);\n      transform: scaleY(0.7);\n    }\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {\n      -webkit-transform: scaleY(0.5);\n      transform: scaleY(0.5);\n    }\n  }\n}\nmixin写在mixin.less，@media写在base.less\n```\n## 将SVG转为字体调用\n用icomoon生成icon样式文件，调用SVG就加入对应的class。可减少小图片的http请求,也方便管理和使用这些小图片。\n将生成的fonts文件夹放入src/common，css文件改为icon.less放入src/common/less。\n引用时用<i class=\"icon-XXX\"></i>，当做字体写样式，具体为i:before。\n## 加入购物车抛物线小球动画\n用两层动画，外层为y轴抛物线函数，内层为x轴线性函数。\n用五个小球，则短时间内最多可显示五个小球动画。\n小球的起始状态用js写。\n```\n// html\n<div class=\"ball-container\">\n  <div v-for=\"ball in balls\">\n    <transition name=\"drop\" @before-enter=\"beforeDrop\" @enter=\"dropping\" @after-enter=\"afterDrop\">\n      <div class=\"ball\" v-show=\"ball.show\">\n        <div class=\"inner inner-hook\"></div>\n      </div>\n    </transition>\n  </div>\n</div>\n// css\n.ball-container {\n  .ball {\n    position: fixed;\n    left: .4rem;\n    bottom: .3rem;\n    z-index: 10;\n    transition: all .4s cubic-bezier(0.49, -0.29, 0.75, 0.41);\n    .inner {\n      width: 1rem;\n      height: 1rem;\n      border-radius: 50%;\n      background: rgb(0, 160, 220);\n      transition: all .4s linear;\n    }\n  }\n}\n// javascript\ndata () {\n  return {\n    balls: [\n      {show: false},\n      {show: false},\n      {show: false},\n      {show: false},\n      {show: false}\n    ],\n    dropBalls: []\n  }\n},\nmethods: {\n  // 在列表组件引用触发动画\n  /*this.$nextTick(() => {\n      this.$refs.spCar.drop(e.target)\n    })*/\n  drop (el) {\n    for (let i = 0; i < this.balls.length; i++) {\n      let ball = this.balls[i]\n      if (!ball.show) {\n        ball.show = true\n        ball.el = el\n        this.dropBalls.push(ball)\n        return\n      }\n    }\n  },\n  // 小球定位到点击处\n  beforeDrop (el) {\n    for (let i = 0; i < this.balls.length; i++) {\n      let ball = this.balls[i]\n      if (ball.show) {\n        let rect = ball.el.getBoundingClientRect()\n        let x = rect.left - window.innerWidth / 10 * 0.4\n        let y = -(window.innerHeight - rect.top - window.innerWidth / 10 * 0.3)\n        el.style.display = ''\n        el.style.webkitTransform = `translate3d(0, ${y}px, 0)`\n        el.style.transform = `translate3d(0, ${y}px, 0)`\n        let inner = el.getElementsByClassName('inner-hook')[0]\n        inner.style.webkitTransform = `translate3d(${x}px, 0, 0)`\n        inner.style.transform = `translate3d(${x}px, 0, 0)`\n      }\n    }\n  },\n  // 动画结束时的状态\n  dropping (el, done) {\n    // 触发重绘\n    /* eslint-disable no-unused-vars */\n    let rf = el.offsetHeight\n    this.$nextTick(() => {\n      el.style.webkitTransform = `translate3d(0, 0, 0)`\n      el.style.transform = `translate3d(0, 0, 0)`\n      let inner = el.getElementsByClassName('inner-hook')[0]\n      inner.style.webkitTransform = `translate3d(0, 0, 0)`\n      inner.style.transform = `translate3d(0, 0, 0)`\n      el.addEventListener('transitionend', () => {\n        this.$refs.carIcon.classList.add('duang')\n        done()\n      })\n    })\n  },\n  afterDrop (el) {\n    let ball = this.dropBalls.shift()\n    if (ball) {\n      ball.show = false\n      //  设display为none需手动触发html重绘：dropping函数中的let rf = el.offsetHeight\n      el.style.display = 'none'\n    }\n  }\n}\n```\n[网页性能管理详解](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n[高性能JavaScript 重排与重绘](http://www.cnblogs.com/zichi/p/4720000.html)\n用[贝塞尔曲线](http://cubic-bezier.com/#.17,.67,.83,.67)模拟抛物线\n## oneBusiness组件样式grid写法\n3X3的格子，其中图片占第一列的三行。\n```\n// 父元素\ndisplay: grid;\ngrid-template-columns: 2rem 5rem 3rem;\ngrid-template-rows: 3fr 1fr 3fr;\n// 子元素img\ngrid-column-start: 1;\ngrid-column-end: 2;\ngrid-row-start: 1;\ngrid-row-end: 4;\n```\n## better-scroll 插件\n```\nimport BScroll from 'better-scroll'\nmounted () {\n  this.$nextTick(() => {\n\tthis.menuScroll = new BScroll(this.$refs.menuWrapper, {\n\t  click: true\n\t})\n\tthis.foodsScroll = new BScroll(this.$refs.foodsWrapper, {\n\t  click: true,\n      // 不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件\n\t  probeType: 3\n\t})\n\tthis.foodsScroll.on('scroll', (pos) => {\n\t  if (pos.y <= 0) {\n\t    this.scrollY = Math.abs(Math.round(pos.y))\n\t  }\n\t})\n  })\n}\n```\n[better-scroll文档](https://ustbhuangyi.github.io/better-scroll/doc)\n[当 better-scroll 遇见 Vue](https://zhuanlan.zhihu.com/p/27407024)\n\n## prod.server.js\nnode prod.server.js // 启动服务器\n```\nvar express = require('express'); //导入express\nvar config = require('./config/index'); //导入index.js(里面有很多配置)\nvar port = process.env.PORT || config.build.port; //初始化端口,端口在index.js配置\nvar app = express(); //实例化express\nvar router = express.Router(); //初始化路由\nrouter.get('/',function (req,res,next) {\n  req.url = '/index.html'; //这里访问的是发布dist/index.html\n  next();\n});\napp.use(router);\nvar appData = require('./data.json'); //读取模拟的数据文件\nvar seller = appData.seller;\nvar goods = appData.goods;\nvar ratings = appData.ratings;\nvar apiRoutes = express.Router();\napiRoutes.get('/seller', function (req, res) {\n  res.json({\n    errno: 0,\n    data: seller\n  });\n});\napiRoutes.get('/goods', function (req, res) {\n  res.json({\n    errno: 0,\n    data: goods\n  });\n});\napiRoutes.get('/ratings', function (req, res) {\n  res.json({\n    errno: 0,\n    data: ratings\n  });\n});\napp.use('/api', apiRoutes);\napp.use(express.static('./dist')); //使用./dist作为web目录,所以能够找到.dist/index.html\nmodule.exports = app.listen(port, function (err) { //启动监听\n  if (err) {\n    console.log(err);\n    return\n  }\n  console.log('Listening at http://localhost:' + port + '\\n')\n});\n```\n## github 预览\n+ config/index.js中\n\t\t- assetsPublicPath: '/',\n\t\t+ assetsPublicPath: './',\n然后 `yarn run build` 打包，打开dist/idnex.html，页面结构正常显示。\n+ 打包不生成SourceMap文件：config/index.js中`productionSourceMap: false`。\n+ 生成gh-pages 分支，其中只包含dist中的static文件夹和index.html。设置Github Pages得网址。\n[制作github在线预览效果](http://www.upyang.com/2017/07/25/Vue%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E5%B9%B6%E9%A2%84%E8%A7%88/#制作github在线预览效果)","tags":["vue"],"categories":["项目笔记"]},{"title":"Vue中:src引用赋值问题","url":"/2017/08/25/Vue中src引用赋值问题/","content":"\n## 对img标签\n\n```\ndata () {\n    return {\n        img: require('path/to/your/source')\n    }\n}\n//然后在template中\n<img :src=\"img\" />\n```\n## 对背景图\n```\ndata () {\n    return {\n        img: require('path/to/your/source')\n    }\n}\n<div :style=\"{backgroundImage: 'url(' + img + ')'}\"></div>\n或者直接在css中定义\nbackground-image: url('path/to/your/source');\n```","tags":["vue"],"categories":["coding tips"]}]