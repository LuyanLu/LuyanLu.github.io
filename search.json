[{"title":"resume-vue笔记","url":"/2017/09/17/resume-vue笔记/"},{"title":"elemeVue笔记","url":"/2017/09/17/elemeVue笔记/","content":"## 模拟后台数据\n### 1. 通过api/...即port+1/...地址访问db.json中的数据\n```\n在build/dev-server.js中\nvar apiServer = express()\nvar bodyParser = require('body-parser')\napiServer.use(bodyParser.urlencoded({ extended: true }))\napiServer.use(bodyParser.json())\nvar apiRouter = express.Router()\nvar fs = require('fs')\napiRouter.route('/:apiName')\n  .all(function (req, res) {\n    fs.readFile('./db.json', 'utf8', function (err, data) {\n      if (err) throw err\n      data = JSON.parse(data)\n      if (data[req.params.apiName]) {\n        res.json(data[req.params.apiName])\n      } else {\n        res.send('no such api name')\n      }\n    })\n  })\napiServer.use('/api', apiRouter)\napiServer.listen(port + 1, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  console.log('Listening at http://localhost:' + (port + 1) + '\\n')\n})\n在config/index.js的dev中\nproxyTable: {\n      '/api': 'http://localhost:3001'\n    }\n```\n### 2. 用axios请求数据\n- 用vuex时\n`yarn add axios`\n```\n在store/actions.js中\nimport Axios from 'axios'\nfetchFalseHotWord ({commit}) {\n    Axios.get('api/falseHotWord')\n      .then((res) => {\n        commit('SET_FALSE_HOT_WORD', res.data)\n      })\n  }\n```\n- 不用vuex时\n`yarn add axios, vue-axios`\n```\n在main.js中\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nVue.use(VueAxios, axios)\n使用时\nVue.axios.get(api).then((response) => {\n  console.log(response.data)\n})\nthis.axios.get(api).then((response) => {\n  console.log(response.data)\n})\nthis.$http.get(api).then((response) => {\n  console.log(response.data)\n})\n```\n## css sticky footer清除浮动\n\n```\n.clearfix:before, clearfix:after {\n    content: \".\";   \n    display: block;   \n    clear: both;     \n    visibility: hidden;\n    line-height: 0;   \n    height: 0;   \n    font-size:0;    \n}\n.clearfix { *zoom:1;} // 移动端不需要\n```\n- zoom: 1 为了兼容 IE6/7,在IE6, 7下zoom: 1会触发hasLayout，从而使元素闭合内部的浮动。\n- :before 给元素内部前面添加一个空的元素 display:block用来防止 **Collapsing margins(外边距压扁)** ，且保证当 IE6/7 应用 zoom:1 时的视觉一致性\n- :after 用来清除浮动\n\t* visibility: hidden 可见度设为隐藏。注意它和display:none;是有区别的。visibility:hidden;仍然占据空间，只是看不到而已\n\t* clear: both 清除左右两边浮动\n\t* display: block需要将元素转为块级元素才可以实现效果,inline-block也可以\n\t* content: \".\" 内容为“.”就是一个英文的句号而已。也可以不写。\n\t* line-height: 0行高为0,设置这些主要是为了避免一些占用位置或者间隔的问题\n\t* height: 0高度为0,同上\n\t* font-size:0 字体大小为0,同上\n---\n清除浮动新方法：display: flow-root产生BFC\n```\n.floatElement{ \n    float: left; /*或者right*/ \n} \n.wrapper::after { /*兼容*/\n    content:''; \n    display: table; \n    clear: both \n} \n@supports(display:flow-root){ \n    .wrapper{ \n        display: flow-root; \n    } \n    .wrapper::after{ \n        content:none; \n    } \n}\n```\n---\nsticky footer：flex方法\n```\n设置footer和header的高度，main高度弹性可变，即flex>0\nbody {\n    display: flex;\n    flex-flow: column;\n    min-height: 100vh;\n}\nmain { flex: 1; }\n```\n## 像素border-1px的实现\n[7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n用mixin写伪类实现1px的border-bottom\n再通过媒体查询根据DPR进行缩放\n```\n.border-1px(@color) {\n  position: relative;\n  &:after {\n    display: block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    border-top: 1px solid @color;\n    content: ' ';\n    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) {\n      -webkit-transform: scaleY(0.7);\n      transform: scaleY(0.7);\n    }\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {\n      -webkit-transform: scaleY(0.5);\n      transform: scaleY(0.5);\n    }\n  }\n}\nmixin写在mixin.less，@media写在base.less\n```\n## 将SVG转为字体调用\n用icomoon生成icon样式文件，调用SVG就加入对应的class。可减少小图片的http请求,也方便管理和使用这些小图片。\n将生成的fonts文件夹放入src/common，css文件改为icon.less放入src/common/less。\n引用时用<i class=\"icon-XXX\"></i>，当做字体写样式，具体为i:before。\n## 加入购物车抛物线小球动画\n用两层动画，外层为y轴抛物线函数，内层为x轴线性函数。\n用五个小球，则短时间内最多可显示五个小球动画。\n小球的起始状态用js写。\n```\n// html\n<div class=\"ball-container\">\n  <div v-for=\"ball in balls\">\n    <transition name=\"drop\" @before-enter=\"beforeDrop\" @enter=\"dropping\" @after-enter=\"afterDrop\">\n      <div class=\"ball\" v-show=\"ball.show\">\n        <div class=\"inner inner-hook\"></div>\n      </div>\n    </transition>\n  </div>\n</div>\n// css\n.ball-container {\n  .ball {\n    position: fixed;\n    left: .4rem;\n    bottom: .3rem;\n    z-index: 10;\n    transition: all .4s cubic-bezier(0.49, -0.29, 0.75, 0.41);\n    .inner {\n      width: 1rem;\n      height: 1rem;\n      border-radius: 50%;\n      background: rgb(0, 160, 220);\n      transition: all .4s linear;\n    }\n  }\n}\n// javascript\ndata () {\n  return {\n    balls: [\n      {show: false},\n      {show: false},\n      {show: false},\n      {show: false},\n      {show: false}\n    ],\n    dropBalls: []\n  }\n},\nmethods: {\n  // 在列表组件引用触发动画\n  /*this.$nextTick(() => {\n      this.$refs.spCar.drop(e.target)\n    })*/\n  drop (el) {\n    for (let i = 0; i < this.balls.length; i++) {\n      let ball = this.balls[i]\n      if (!ball.show) {\n        ball.show = true\n        ball.el = el\n        this.dropBalls.push(ball)\n        return\n      }\n    }\n  },\n  // 小球定位到点击处\n  beforeDrop (el) {\n    for (let i = 0; i < this.balls.length; i++) {\n      let ball = this.balls[i]\n      if (ball.show) {\n        let rect = ball.el.getBoundingClientRect()\n        let x = rect.left - window.innerWidth / 10 * 0.4\n        let y = -(window.innerHeight - rect.top - window.innerWidth / 10 * 0.3)\n        el.style.display = ''\n        el.style.webkitTransform = `translate3d(0, ${y}px, 0)`\n        el.style.transform = `translate3d(0, ${y}px, 0)`\n        let inner = el.getElementsByClassName('inner-hook')[0]\n        inner.style.webkitTransform = `translate3d(${x}px, 0, 0)`\n        inner.style.transform = `translate3d(${x}px, 0, 0)`\n      }\n    }\n  },\n  // 动画结束时的状态\n  dropping (el, done) {\n    // 触发重绘\n    /* eslint-disable no-unused-vars */\n    let rf = el.offsetHeight\n    this.$nextTick(() => {\n      el.style.webkitTransform = `translate3d(0, 0, 0)`\n      el.style.transform = `translate3d(0, 0, 0)`\n      let inner = el.getElementsByClassName('inner-hook')[0]\n      inner.style.webkitTransform = `translate3d(0, 0, 0)`\n      inner.style.transform = `translate3d(0, 0, 0)`\n      el.addEventListener('transitionend', () => {\n        this.$refs.carIcon.classList.add('duang')\n        done()\n      })\n    })\n  },\n  afterDrop (el) {\n    let ball = this.dropBalls.shift()\n    if (ball) {\n      ball.show = false\n      //  设display为none需手动触发html重绘：dropping函数中的let rf = el.offsetHeight\n      el.style.display = 'none'\n    }\n  }\n}\n```\n[网页性能管理详解](http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html)\n[高性能JavaScript 重排与重绘](http://www.cnblogs.com/zichi/p/4720000.html)\n用[贝塞尔曲线](http://cubic-bezier.com/#.17,.67,.83,.67)模拟抛物线\n## oneBusiness组件样式grid写法\n3X3的格子，其中图片占第一列的三行。\n```\n// 父元素\ndisplay: grid;\ngrid-template-columns: 2rem 5rem 3rem;\ngrid-template-rows: 3fr 1fr 3fr;\n// 子元素img\ngrid-column-start: 1;\ngrid-column-end: 2;\ngrid-row-start: 1;\ngrid-row-end: 4;\n```\n## better-scroll 插件\n```\nimport BScroll from 'better-scroll'\nmounted () {\n  this.$nextTick(() => {\n\tthis.menuScroll = new BScroll(this.$refs.menuWrapper, {\n\t  click: true\n\t})\n\tthis.foodsScroll = new BScroll(this.$refs.foodsWrapper, {\n\t  click: true,\n      // 不仅在屏幕滑动的过程中，而且在 momentum 滚动动画运行过程中实时派发 scroll 事件\n\t  probeType: 3\n\t})\n\tthis.foodsScroll.on('scroll', (pos) => {\n\t  if (pos.y <= 0) {\n\t    this.scrollY = Math.abs(Math.round(pos.y))\n\t  }\n\t})\n  })\n}\n```\n[better-scroll文档](https://ustbhuangyi.github.io/better-scroll/doc)\n[当 better-scroll 遇见 Vue](https://zhuanlan.zhihu.com/p/27407024)\n\n## prod.server.js\nnode prod.server.js // 启动服务器\n```\nvar express = require('express'); //导入express\nvar config = require('./config/index'); //导入index.js(里面有很多配置)\nvar port = process.env.PORT || config.build.port; //初始化端口,端口在index.js配置\nvar app = express(); //实例化express\nvar router = express.Router(); //初始化路由\nrouter.get('/',function (req,res,next) {\n  req.url = '/index.html'; //这里访问的是发布dist/index.html\n  next();\n});\napp.use(router);\nvar appData = require('./data.json'); //读取模拟的数据文件\nvar seller = appData.seller;\nvar goods = appData.goods;\nvar ratings = appData.ratings;\nvar apiRoutes = express.Router();\napiRoutes.get('/seller', function (req, res) {\n  res.json({\n    errno: 0,\n    data: seller\n  });\n});\napiRoutes.get('/goods', function (req, res) {\n  res.json({\n    errno: 0,\n    data: goods\n  });\n});\napiRoutes.get('/ratings', function (req, res) {\n  res.json({\n    errno: 0,\n    data: ratings\n  });\n});\napp.use('/api', apiRoutes);\napp.use(express.static('./dist')); //使用./dist作为web目录,所以能够找到.dist/index.html\nmodule.exports = app.listen(port, function (err) { //启动监听\n  if (err) {\n    console.log(err);\n    return\n  }\n  console.log('Listening at http://localhost:' + port + '\\n')\n});\n```\n## github 预览\nconfig/index.js中\n\t\t- assetsPublicPath: '/',\n\t\t+ assetsPublicPath: './',\n然后 `yarn run build` 打包，打开dist/idnex.html，页面结构正常显示。\n生成gh-pages 分支，其中只包含dist中的static文件夹和index.html。设置Github Pages得网址。\n[制作github在线预览效果](http://www.upyang.com/2017/07/25/Vue%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E5%B9%B6%E9%A2%84%E8%A7%88/#制作github在线预览效果)","tags":["vue"],"categories":["项目笔记"]},{"title":"Vue中:src引用赋值问题","url":"/2017/08/25/Vue中src引用赋值问题/","content":"\n## 对img标签\n\n```\ndata () {\n    return {\n        img: require('path/to/your/source')\n    }\n}\n//然后在template中\n<img :src=\"img\" />\n```\n## 对背景图\n```\ndata () {\n    return {\n        img: require('path/to/your/source')\n    }\n}\n<div :style=\"{backgroundImage: 'url(' + img + ')'}\"></div>\n或者直接在css中定义\nbackground-image: url('path/to/your/source');\n```","tags":["vue"],"categories":["coding tips"]}]